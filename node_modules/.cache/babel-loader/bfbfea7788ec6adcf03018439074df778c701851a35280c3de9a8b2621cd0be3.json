{"ast":null,"code":"var _jsxFileName = \"/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/Row/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Row = _ref => {\n  _s();\n  let {\n    value,\n    onChange,\n    color\n  } = _ref;\n  const inputRefs = useRef([]);\n  const handleKeyDown = (index, event) => {\n    const {\n      key\n    } = event;\n    if ((key === \"ArrowLeft\" || key === \"Backspace\") && index > 0) {\n      inputRefs.current[index - 1].focus();\n    } else if (key === \"ArrowRight\" && index < 4) {\n      inputRefs.current[index + 1].focus();\n    } else {\n      const newValue = [...value];\n      newValue[index] = event.target.value.toUpperCase();\n      onChange(newValue);\n      if (newValue[index] !== \"\" && index < 4) {\n        inputRefs.current[index + 1].focus();\n      }\n    }\n  };\n  useEffect(() => {\n    if (color === \"green\") inputRefs.current[0].focus();\n  }, [color]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Row\",\n      children: [...Array(5).keys()].map(index => /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"Input\",\n        style: {\n          backgroundColor: \"light\" + color\n        },\n        ref: ref => inputRefs.current[index] = ref,\n        index: index,\n        value: value[index],\n        maxLength: 1,\n        onKeyDown: e => handleKeyDown(index, e)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(Row, \"KbBMijb38wIYom9D23LsjYZTGu4=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Row","_ref","_s","value","onChange","color","inputRefs","handleKeyDown","index","event","key","current","focus","newValue","target","toUpperCase","children","className","Array","keys","map","style","backgroundColor","ref","maxLength","onKeyDown","e","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/Row/Row.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ value, onChange, color }) => {\n    const inputRefs = useRef([]);\n\n    const handleKeyDown = (index, event) => {\n        const { key } = event;\n        if ((key === \"ArrowLeft\" || key === \"Backspace\")  && index > 0) {\n          inputRefs.current[index - 1].focus();\n        } else if (key === \"ArrowRight\" && index < 4) {\n          inputRefs.current[index + 1].focus();\n        } else {\n            const newValue = [...value];\n            newValue[index] = event.target.value.toUpperCase();\n            onChange(newValue);\n            if (newValue[index] !== \"\" && index < 4) {\n                inputRefs.current[index + 1].focus();\n            }\n        }\n      };\n\n    useEffect(() => {\n        if (color === \"green\")\n            inputRefs.current[0].focus();\n    }, [color]);\n    \n\n    return(\n        <div>\n            <div className=\"Row\">\n                {/* create 5 text input fields using a loop*/}\n                {[...Array(5).keys()].map((index) => (\n                    <input \n                        className=\"Input\"\n                        style={{backgroundColor: \"light\"+color}}\n                        key={index} \n                        ref={(ref) => (inputRefs.current[index] = ref)}\n                        index={index}\n                        value={value[index]} \n                        maxLength={1} \n                        onKeyDown={(e) => handleKeyDown(index, e)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Row;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGC,IAAA,IAAgC;EAAAC,EAAA;EAAA,IAA/B;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAM,CAAC,GAAAJ,IAAA;EACnC,MAAMK,SAAS,GAAGT,MAAM,CAAC,EAAE,CAAC;EAE5B,MAAMU,aAAa,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACpC,MAAM;MAAEC;IAAI,CAAC,GAAGD,KAAK;IACrB,IAAI,CAACC,GAAG,KAAK,WAAW,IAAIA,GAAG,KAAK,WAAW,KAAMF,KAAK,GAAG,CAAC,EAAE;MAC9DF,SAAS,CAACK,OAAO,CAACH,KAAK,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC;IACtC,CAAC,MAAM,IAAIF,GAAG,KAAK,YAAY,IAAIF,KAAK,GAAG,CAAC,EAAE;MAC5CF,SAAS,CAACK,OAAO,CAACH,KAAK,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC;IACtC,CAAC,MAAM;MACH,MAAMC,QAAQ,GAAG,CAAC,GAAGV,KAAK,CAAC;MAC3BU,QAAQ,CAACL,KAAK,CAAC,GAAGC,KAAK,CAACK,MAAM,CAACX,KAAK,CAACY,WAAW,CAAC,CAAC;MAClDX,QAAQ,CAACS,QAAQ,CAAC;MAClB,IAAIA,QAAQ,CAACL,KAAK,CAAC,KAAK,EAAE,IAAIA,KAAK,GAAG,CAAC,EAAE;QACrCF,SAAS,CAACK,OAAO,CAACH,KAAK,GAAG,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC;MACxC;IACJ;EACF,CAAC;EAEHhB,SAAS,CAAC,MAAM;IACZ,IAAIS,KAAK,KAAK,OAAO,EACjBC,SAAS,CAACK,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACpC,CAAC,EAAE,CAACP,KAAK,CAAC,CAAC;EAGX,oBACIN,OAAA;IAAAiB,QAAA,eACIjB,OAAA;MAAKkB,SAAS,EAAC,KAAK;MAAAD,QAAA,EAEf,CAAC,GAAGE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEZ,KAAK,iBAC5BT,OAAA;QACIkB,SAAS,EAAC,OAAO;QACjBI,KAAK,EAAE;UAACC,eAAe,EAAE,OAAO,GAACjB;QAAK,CAAE;QAExCkB,GAAG,EAAGA,GAAG,IAAMjB,SAAS,CAACK,OAAO,CAACH,KAAK,CAAC,GAAGe,GAAK;QAC/Cf,KAAK,EAAEA,KAAM;QACbL,KAAK,EAAEA,KAAK,CAACK,KAAK,CAAE;QACpBgB,SAAS,EAAE,CAAE;QACbC,SAAS,EAAGC,CAAC,IAAKnB,aAAa,CAACC,KAAK,EAAEkB,CAAC;MAAE,GALrClB,KAAK;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMb,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5B,EAAA,CA5CIF,GAAG;AAAA+B,EAAA,GAAH/B,GAAG;AA8CT,eAAeA,GAAG;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}