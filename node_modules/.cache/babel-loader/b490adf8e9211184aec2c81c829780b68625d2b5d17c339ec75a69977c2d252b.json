{"ast":null,"code":"import word_list from \"../Data/word_list.txt\";\nconst ResultsProvider = _ref => {\n  let {\n    rows\n  } = _ref;\n  for (let row of rows) {\n    word_list = word_list.filter(word => {\n      // check if word matches row\n      for (let [i, char] of row.entries()) {\n        if (row === \"green\" && char !== word[i]) {\n          return false;\n        }\n        if (row === \"yellow\" && (!(char in word) || char == word[i])) {\n          return false;\n        }\n        if (row === \"grey\" && char in word) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n  return word_list;\n};\n_c = ResultsProvider;\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\nvar _c;\n$RefreshReg$(_c, \"ResultsProvider\");","map":{"version":3,"names":["word_list","ResultsProvider","_ref","rows","row","filter","word","i","char","entries","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/list_gen.js"],"sourcesContent":["import word_list from \"../Data/word_list.txt\";\n\nconst ResultsProvider = ({ rows }) => {\n    for( let row of rows ) {\n        word_list = word_list.filter((word) => {\n\n            // check if word matches row\n            for (let [i, char] of row.entries()) {\n                if (row === \"green\" && char !== word[i]) {\n                    return false;\n                }\n                if (row === \"yellow\" && (!(char in word) || char == word[i])) {\n                    return false;\n                }\n                if (row === \"grey\" && char in word) {\n                    return false;\n                }\n            }\n            return true;\n\n        });\n    }   \n    return word_list\n};\n\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\n\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,uBAAuB;AAE7C,MAAMC,eAAe,GAAGC,IAAA,IAAc;EAAA,IAAb;IAAEC;EAAK,CAAC,GAAAD,IAAA;EAC7B,KAAK,IAAIE,GAAG,IAAID,IAAI,EAAG;IACnBH,SAAS,GAAGA,SAAS,CAACK,MAAM,CAAEC,IAAI,IAAK;MAEnC;MACA,KAAK,IAAI,CAACC,CAAC,EAAEC,IAAI,CAAC,IAAIJ,GAAG,CAACK,OAAO,CAAC,CAAC,EAAE;QACjC,IAAIL,GAAG,KAAK,OAAO,IAAII,IAAI,KAAKF,IAAI,CAACC,CAAC,CAAC,EAAE;UACrC,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,KAAK,QAAQ,KAAK,EAAEI,IAAI,IAAIF,IAAI,CAAC,IAAIE,IAAI,IAAIF,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;UAC1D,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,KAAK,MAAM,IAAII,IAAI,IAAIF,IAAI,EAAE;UAChC,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IAEf,CAAC,CAAC;EACN;EACA,OAAON,SAAS;AACpB,CAAC;AAACU,EAAA,GArBIT,eAAe;AAuBrB,eAAeA,eAAe;;AAE9B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}