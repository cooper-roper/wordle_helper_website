{"ast":null,"code":"const ResultsProvider = rows => {\n  let word_list = fetch('../Data/word_list.txt').then(response => response.text()).then(text => {\n    const array = text.split('\\n');\n    console.log(array);\n  });\n  for (let row of rows) {\n    word_list = word_list.filter(word => {\n      // check if word matches row\n      for (let [i, char] of row.entries()) {\n        if (row === \"green\" && char !== word[i]) {\n          return false;\n        }\n        if (row === \"yellow\" && (!(char in word) || char === word[i])) {\n          return false;\n        }\n        if (row === \"grey\" && char in word) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n  return word_list;\n};\n_c = ResultsProvider;\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\nvar _c;\n$RefreshReg$(_c, \"ResultsProvider\");","map":{"version":3,"names":["ResultsProvider","rows","word_list","fetch","then","response","text","array","split","console","log","row","filter","word","i","char","entries","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/ResultsProvider.js"],"sourcesContent":["\nconst ResultsProvider = ( rows ) => {\n\n    let word_list = fetch('../Data/word_list.txt')\n    .then(response => response.text())\n    .then(text => {\n        const array = text.split('\\n');\n        console.log(array);\n    });\n\n\n    for( let row of rows ) {\n        word_list = word_list.filter((word) => {\n\n            // check if word matches row\n            for (let [i, char] of row.entries()) {\n                if (row === \"green\" && char !== word[i]) {\n                    return false;\n                }\n                if (row === \"yellow\" && (!(char in word) || char === word[i])) {\n                    return false;\n                }\n                if (row === \"grey\" && char in word) {\n                    return false;\n                }\n            }\n            return true;\n\n        });\n    }   \n    return word_list\n};\n\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\n\n"],"mappings":"AACA,MAAMA,eAAe,GAAKC,IAAI,IAAM;EAEhC,IAAIC,SAAS,GAAGC,KAAK,CAAC,uBAAuB,CAAC,CAC7CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACE,IAAI,IAAI;IACV,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9BC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;EACtB,CAAC,CAAC;EAGF,KAAK,IAAII,GAAG,IAAIV,IAAI,EAAG;IACnBC,SAAS,GAAGA,SAAS,CAACU,MAAM,CAAEC,IAAI,IAAK;MAEnC;MACA,KAAK,IAAI,CAACC,CAAC,EAAEC,IAAI,CAAC,IAAIJ,GAAG,CAACK,OAAO,CAAC,CAAC,EAAE;QACjC,IAAIL,GAAG,KAAK,OAAO,IAAII,IAAI,KAAKF,IAAI,CAACC,CAAC,CAAC,EAAE;UACrC,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,KAAK,QAAQ,KAAK,EAAEI,IAAI,IAAIF,IAAI,CAAC,IAAIE,IAAI,KAAKF,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;UAC3D,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,KAAK,MAAM,IAAII,IAAI,IAAIF,IAAI,EAAE;UAChC,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IAEf,CAAC,CAAC;EACN;EACA,OAAOX,SAAS;AACpB,CAAC;AAACe,EAAA,GA9BIjB,eAAe;AAgCrB,eAAeA,eAAe;;AAE9B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}