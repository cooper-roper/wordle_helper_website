{"ast":null,"code":"import { wordList } from \"../Data/wordList\";\nconst ResultsProvider = rows => {\n  let filteredList = [...wordList].slice(0, 2);\n  for (let row of rows) {\n    filteredList = filteredList.filter(word => {\n      // check if word matches row\n      console.log(word);\n      for (let {\n        i,\n        char\n      } of row['array'].entries()) {\n        console.log(i, char);\n        if (char === null || char === '' || char === ' ') continue;\n        if (row.color === \"green\" && char !== word[i]) {\n          return false;\n        }\n        if (row.color === \"yellow\" && (!(char in word) || char === word[i])) {\n          return false;\n        }\n        if (row.color === \"grey\" && char in word) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n  return filteredList;\n};\n_c = ResultsProvider;\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\nvar _c;\n$RefreshReg$(_c, \"ResultsProvider\");","map":{"version":3,"names":["wordList","ResultsProvider","rows","filteredList","slice","row","filter","word","console","log","i","char","entries","color","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/ResultsProvider.js"],"sourcesContent":["import { wordList } from \"../Data/wordList\";\n\nconst ResultsProvider = ( rows ) => {\n    let filteredList = [...wordList].slice(0,2);\n\n    for( let row of rows ) {\n        filteredList = filteredList.filter((word) => {\n            // check if word matches row\n            console.log(word);\n            for (let {i, char} of row['array'].entries()) {\n\n                console.log(i, char);\n\n                if (char === null || char === '' || char === ' ') continue;\n\n                if (row.color === \"green\" && char !== word[i]) {\n                    return false;\n                }\n                if (row.color === \"yellow\" && (!(char in word) || char === word[i])) {\n                    return false;\n                }\n                if (row.color === \"grey\" && char in word) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    }   \n    return filteredList\n};\n\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,MAAMC,eAAe,GAAKC,IAAI,IAAM;EAChC,IAAIC,YAAY,GAAG,CAAC,GAAGH,QAAQ,CAAC,CAACI,KAAK,CAAC,CAAC,EAAC,CAAC,CAAC;EAE3C,KAAK,IAAIC,GAAG,IAAIH,IAAI,EAAG;IACnBC,YAAY,GAAGA,YAAY,CAACG,MAAM,CAAEC,IAAI,IAAK;MACzC;MACAC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,KAAK,IAAI;QAACG,CAAC;QAAEC;MAAI,CAAC,IAAIN,GAAG,CAAC,OAAO,CAAC,CAACO,OAAO,CAAC,CAAC,EAAE;QAE1CJ,OAAO,CAACC,GAAG,CAACC,CAAC,EAAEC,IAAI,CAAC;QAEpB,IAAIA,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,EAAE;QAElD,IAAIN,GAAG,CAACQ,KAAK,KAAK,OAAO,IAAIF,IAAI,KAAKJ,IAAI,CAACG,CAAC,CAAC,EAAE;UAC3C,OAAO,KAAK;QAChB;QACA,IAAIL,GAAG,CAACQ,KAAK,KAAK,QAAQ,KAAK,EAAEF,IAAI,IAAIJ,IAAI,CAAC,IAAII,IAAI,KAAKJ,IAAI,CAACG,CAAC,CAAC,CAAC,EAAE;UACjE,OAAO,KAAK;QAChB;QACA,IAAIL,GAAG,CAACQ,KAAK,KAAK,MAAM,IAAIF,IAAI,IAAIJ,IAAI,EAAE;UACtC,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf,CAAC,CAAC;EACN;EACA,OAAOJ,YAAY;AACvB,CAAC;AAACW,EAAA,GA3BIb,eAAe;AA6BrB,eAAeA,eAAe;;AAE9B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}