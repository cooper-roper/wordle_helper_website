{"ast":null,"code":"import { wordList } from \"../Data/wordList\";\nconst ResultsProvider = rows => {\n  let filteredList = [...wordList];\n  for (var row of rows) {\n    filteredList = filteredList.filter(word => {\n      // check if word matches row\n      for (let [i, char] of row.array.entries()) {\n        if (char === undefined || char === '' || char === ' ') continue;\n        if (row.color === \"green\" && char.toLowerCase() !== word[i]) {\n          console.log(char, word[i]);\n          return false;\n        }\n        if (row.color === \"yellow\" && (!(chartoLowerCase() in word) || chartoLowerCase() === word[i])) {\n          return false;\n        }\n        if (row.color === \"grey\" && chartoLowerCase() in word) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n  return filteredList;\n};\n_c = ResultsProvider;\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\nvar _c;\n$RefreshReg$(_c, \"ResultsProvider\");","map":{"version":3,"names":["wordList","ResultsProvider","rows","filteredList","row","filter","word","i","char","array","entries","undefined","color","toLowerCase","console","log","chartoLowerCase","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/ResultsProvider.js"],"sourcesContent":["import { wordList } from \"../Data/wordList\";\n\nconst ResultsProvider = ( rows ) => {\n    let filteredList = [...wordList];\n\n    for( var row of rows ) {\n        filteredList = filteredList.filter((word) => {\n            // check if word matches row\n            for (let [i, char] of row.array.entries()) {\n\n                if (char === undefined || char === '' || char === ' ') continue;\n\n                if (row.color === \"green\" && char.toLowerCase() !== word[i]) {\n                    console.log(char, word[i])\n                    return false;\n                }\n                if (row.color === \"yellow\" && (!(chartoLowerCase() in word) || chartoLowerCase() === word[i])) {\n                    return false;\n                }\n                if (row.color === \"grey\" && chartoLowerCase() in word) {\n                    return false;\n                }\n            }\n            return true;\n        });\n    }   \n    return filteredList\n};\n\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,MAAMC,eAAe,GAAKC,IAAI,IAAM;EAChC,IAAIC,YAAY,GAAG,CAAC,GAAGH,QAAQ,CAAC;EAEhC,KAAK,IAAII,GAAG,IAAIF,IAAI,EAAG;IACnBC,YAAY,GAAGA,YAAY,CAACE,MAAM,CAAEC,IAAI,IAAK;MACzC;MACA,KAAK,IAAI,CAACC,CAAC,EAAEC,IAAI,CAAC,IAAIJ,GAAG,CAACK,KAAK,CAACC,OAAO,CAAC,CAAC,EAAE;QAEvC,IAAIF,IAAI,KAAKG,SAAS,IAAIH,IAAI,KAAK,EAAE,IAAIA,IAAI,KAAK,GAAG,EAAE;QAEvD,IAAIJ,GAAG,CAACQ,KAAK,KAAK,OAAO,IAAIJ,IAAI,CAACK,WAAW,CAAC,CAAC,KAAKP,IAAI,CAACC,CAAC,CAAC,EAAE;UACzDO,OAAO,CAACC,GAAG,CAACP,IAAI,EAAEF,IAAI,CAACC,CAAC,CAAC,CAAC;UAC1B,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,CAACQ,KAAK,KAAK,QAAQ,KAAK,EAAEI,eAAe,CAAC,CAAC,IAAIV,IAAI,CAAC,IAAIU,eAAe,CAAC,CAAC,KAAKV,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;UAC3F,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,CAACQ,KAAK,KAAK,MAAM,IAAII,eAAe,CAAC,CAAC,IAAIV,IAAI,EAAE;UACnD,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf,CAAC,CAAC;EACN;EACA,OAAOH,YAAY;AACvB,CAAC;AAACc,EAAA,GAzBIhB,eAAe;AA2BrB,eAAeA,eAAe;;AAE9B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}