{"ast":null,"code":"var _jsxFileName = \"/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/Row/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GreenRow = _ref => {\n  _s();\n  let {\n    value,\n    onChange,\n    color\n  } = _ref;\n  const inputRefs = useRef([]);\n  const handleInputChange = (index, event) => {\n    const newValue = [...value];\n    newValue[index] = event.target.value.toUpperCase();\n    onChange(newValue);\n    console.log(index);\n    if (newValue[index] === \"\" && index > 0) {\n      inputRefs.current[index - 1].focus();\n    } else if (newValue[index] !== \"\" && index < 4) {\n      inputRefs.current[index + 1].focus();\n    }\n  };\n  useEffect(() => {\n    if (color === \"green\") inputRefs.current[0].focus();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Row\",\n      children: [...Array(5).keys()].map(index => /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"Input\",\n        style: {\n          backgroundColor: \"light\" + color\n        },\n        ref: ref => inputRefs.current[index] = ref,\n        index: index,\n        value: value[index],\n        maxLength: 1,\n        onChange: e => handleInputChange(index, e)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(GreenRow, \"KbBMijb38wIYom9D23LsjYZTGu4=\");\n_c = GreenRow;\nexport default GreenRow;\nvar _c;\n$RefreshReg$(_c, \"GreenRow\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","GreenRow","_ref","_s","value","onChange","color","inputRefs","handleInputChange","index","event","newValue","target","toUpperCase","console","log","current","focus","children","className","Array","keys","map","style","backgroundColor","ref","maxLength","e","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/Row/Row.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport \"./Row.css\";\n\nconst GreenRow = ({ value, onChange, color }) => {\n    const inputRefs = useRef([]);\n\n    const handleInputChange = (index, event) => {\n        const newValue = [...value];\n        newValue[index] = event.target.value.toUpperCase();\n        onChange(newValue);\n\n        console.log(index);\n\n        if ((newValue[index] === \"\") && index > 0) {\n            inputRefs.current[index - 1].focus();\n        }\n        else if (newValue[index] !== \"\" && index < 4) {\n            inputRefs.current[index + 1].focus();\n        }\n    };\n\n    useEffect(() => {\n        if (color === \"green\")\n            inputRefs.current[0].focus();\n    }, []);\n    \n\n    return(\n        <div>\n            <div className=\"Row\">\n                {/* create 5 text input fields using a loop*/}\n                {[...Array(5).keys()].map((index) => (\n                    <input \n                        className=\"Input\"\n                        style={{backgroundColor: \"light\"+color}}\n                        key={index} \n                        ref={(ref) => (inputRefs.current[index] = ref)}\n                        index={index}\n                        value={value[index]} \n                        maxLength={1} \n                        onChange={(e) => handleInputChange(index, e)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default GreenRow;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,QAAQ,GAAGC,IAAA,IAAgC;EAAAC,EAAA;EAAA,IAA/B;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAM,CAAC,GAAAJ,IAAA;EACxC,MAAMK,SAAS,GAAGT,MAAM,CAAC,EAAE,CAAC;EAE5B,MAAMU,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACxC,MAAMC,QAAQ,GAAG,CAAC,GAAGP,KAAK,CAAC;IAC3BO,QAAQ,CAACF,KAAK,CAAC,GAAGC,KAAK,CAACE,MAAM,CAACR,KAAK,CAACS,WAAW,CAAC,CAAC;IAClDR,QAAQ,CAACM,QAAQ,CAAC;IAElBG,OAAO,CAACC,GAAG,CAACN,KAAK,CAAC;IAElB,IAAKE,QAAQ,CAACF,KAAK,CAAC,KAAK,EAAE,IAAKA,KAAK,GAAG,CAAC,EAAE;MACvCF,SAAS,CAACS,OAAO,CAACP,KAAK,GAAG,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC;IACxC,CAAC,MACI,IAAIN,QAAQ,CAACF,KAAK,CAAC,KAAK,EAAE,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC1CF,SAAS,CAACS,OAAO,CAACP,KAAK,GAAG,CAAC,CAAC,CAACQ,KAAK,CAAC,CAAC;IACxC;EACJ,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACZ,IAAIS,KAAK,KAAK,OAAO,EACjBC,SAAS,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAGN,oBACIjB,OAAA;IAAAkB,QAAA,eACIlB,OAAA;MAAKmB,SAAS,EAAC,KAAK;MAAAD,QAAA,EAEf,CAAC,GAAGE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEb,KAAK,iBAC5BT,OAAA;QACImB,SAAS,EAAC,OAAO;QACjBI,KAAK,EAAE;UAACC,eAAe,EAAE,OAAO,GAAClB;QAAK,CAAE;QAExCmB,GAAG,EAAGA,GAAG,IAAMlB,SAAS,CAACS,OAAO,CAACP,KAAK,CAAC,GAAGgB,GAAK;QAC/ChB,KAAK,EAAEA,KAAM;QACbL,KAAK,EAAEA,KAAK,CAACK,KAAK,CAAE;QACpBiB,SAAS,EAAE,CAAE;QACbrB,QAAQ,EAAGsB,CAAC,IAAKnB,iBAAiB,CAACC,KAAK,EAAEkB,CAAC;MAAE,GALxClB,KAAK;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMb,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5B,EAAA,CA3CIF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}