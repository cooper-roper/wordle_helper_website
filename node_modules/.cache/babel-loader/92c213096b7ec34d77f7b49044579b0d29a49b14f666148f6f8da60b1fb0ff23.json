{"ast":null,"code":"var _s = $RefreshSig$();\n// get fs module\n\nconst ResultsProvider = rows => {\n  _s();\n  const [wordList, setFileContent] = useState([]);\n  const file = \"../Data/word_list.txt\";\n  const reader = new FileReader();\n  reader.onload = event => {\n    const contents = event.target.result;\n    const array = contents.split(\"\\n\"); // Split the contents by newline to get an array of lines\n    setFileContent(array);\n  };\n  reader.readAsText(file);\n  for (let row of rows) {\n    wordList = wordList.filter(word => {\n      // check if word matches row\n      for (let [i, char] of row.entries()) {\n        if (row === \"green\" && char !== word[i]) {\n          return false;\n        }\n        if (row === \"yellow\" && (!(char in word) || char === word[i])) {\n          return false;\n        }\n        if (row === \"grey\" && char in word) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }\n  return wordList;\n};\n_s(ResultsProvider, \"Pu/Ja3m+L2TYLiKGSol/z18HrbY=\");\n_c = ResultsProvider;\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\nvar _c;\n$RefreshReg$(_c, \"ResultsProvider\");","map":{"version":3,"names":["ResultsProvider","rows","_s","wordList","setFileContent","useState","file","reader","FileReader","onload","event","contents","target","result","array","split","readAsText","row","filter","word","i","char","entries","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/ResultsProvider.js"],"sourcesContent":["// get fs module\n\nconst ResultsProvider = ( rows ) => {\n\n    const [wordList, setFileContent] = useState([]);\n\n    const file = \"../Data/word_list.txt\";\n    const reader = new FileReader();\n    reader.onload = (event) => {\n        const contents = event.target.result;\n        const array = contents.split(\"\\n\"); // Split the contents by newline to get an array of lines\n        setFileContent(array);\n    };\n    reader.readAsText(file);\n\n    for( let row of rows ) {\n        wordList = wordList.filter((word) => {\n\n            // check if word matches row\n            for (let [i, char] of row.entries()) {\n                if (row === \"green\" && char !== word[i]) {\n                    return false;\n                }\n                if (row === \"yellow\" && (!(char in word) || char === word[i])) {\n                    return false;\n                }\n                if (row === \"grey\" && char in word) {\n                    return false;\n                }\n            }\n            return true;\n\n        });\n    }   \n    return wordList\n};\n\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\n\n"],"mappings":";AAAA;;AAEA,MAAMA,eAAe,GAAKC,IAAI,IAAM;EAAAC,EAAA;EAEhC,MAAM,CAACC,QAAQ,EAAEC,cAAc,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAE/C,MAAMC,IAAI,GAAG,uBAAuB;EACpC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;EAC/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;IACvB,MAAMC,QAAQ,GAAGD,KAAK,CAACE,MAAM,CAACC,MAAM;IACpC,MAAMC,KAAK,GAAGH,QAAQ,CAACI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACpCX,cAAc,CAACU,KAAK,CAAC;EACzB,CAAC;EACDP,MAAM,CAACS,UAAU,CAACV,IAAI,CAAC;EAEvB,KAAK,IAAIW,GAAG,IAAIhB,IAAI,EAAG;IACnBE,QAAQ,GAAGA,QAAQ,CAACe,MAAM,CAAEC,IAAI,IAAK;MAEjC;MACA,KAAK,IAAI,CAACC,CAAC,EAAEC,IAAI,CAAC,IAAIJ,GAAG,CAACK,OAAO,CAAC,CAAC,EAAE;QACjC,IAAIL,GAAG,KAAK,OAAO,IAAII,IAAI,KAAKF,IAAI,CAACC,CAAC,CAAC,EAAE;UACrC,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,KAAK,QAAQ,KAAK,EAAEI,IAAI,IAAIF,IAAI,CAAC,IAAIE,IAAI,KAAKF,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;UAC3D,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,KAAK,MAAM,IAAII,IAAI,IAAIF,IAAI,EAAE;UAChC,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IAEf,CAAC,CAAC;EACN;EACA,OAAOhB,QAAQ;AACnB,CAAC;AAACD,EAAA,CAjCIF,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AAmCrB,eAAeA,eAAe;;AAE9B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}