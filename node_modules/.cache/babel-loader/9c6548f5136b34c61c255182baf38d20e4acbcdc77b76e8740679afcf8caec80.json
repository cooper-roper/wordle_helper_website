{"ast":null,"code":"var _jsxFileName = \"/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/Row/Row.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport \"./Row.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Row = _ref => {\n  _s();\n  let {\n    value,\n    onChange,\n    color,\n    isFocused,\n    column\n  } = _ref;\n  const inputRefs = useRef([]);\n  const isAlpha = function (ch) {\n    return /^[A-Z]$/i.test(ch);\n  };\n  const handleKeyUp = (index, event) => {\n    const {\n      key\n    } = event;\n    if (isAlpha(key)) {\n      const newValue = [...value];\n      newValue[index] = key;\n      onChange(newValue);\n      if (index < 4) inputRefs.current[index + 1].focus();\n    }\n  };\n  useEffect(() => {\n    if (isFocused) inputRefs.current[column].focus();\n  }, [isFocused, column]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Row\",\n      children: [...Array(5).keys()].map(index => /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"Input\",\n        style: {\n          backgroundColor: \"light\" + color,\n          textTransform: \"uppercase\"\n        },\n        ref: ref => inputRefs.current[index] = ref,\n        index: index,\n        value: value[index],\n        pattern: \"[a-zA-Z]+\",\n        maxLength: 1,\n        onKeyUp: e => handleKeyUp(index, e)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n_s(Row, \"KbBMijb38wIYom9D23LsjYZTGu4=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Row","_ref","_s","value","onChange","color","isFocused","column","inputRefs","isAlpha","ch","test","handleKeyUp","index","event","key","newValue","current","focus","children","className","Array","keys","map","style","backgroundColor","textTransform","ref","pattern","maxLength","onKeyUp","e","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/Row/Row.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport \"./Row.css\";\n\nconst Row = ({ value, onChange, color, isFocused, column }) => {\n    const inputRefs = useRef([]);\n\n    const isAlpha = function(ch){\n        return /^[A-Z]$/i.test(ch);\n    }\n\n    const handleKeyUp = (index, event) => {\n        const { key } = event;\n        if (isAlpha(key)) {\n            const newValue = [...value];\n            newValue[index] = key;\n            onChange(newValue);\n            if (index < 4) inputRefs.current[index + 1].focus();\n        }\n    };\n\n    useEffect(() => {\n        if (isFocused)\n            inputRefs.current[column].focus();\n    }, [isFocused, column]);\n    \n\n    return(\n        <div>\n            <div className=\"Row\">\n                {/* create 5 text input fields using a loop*/}\n                {[...Array(5).keys()].map((index) => (\n                    <input \n                        className=\"Input\"\n                        style={{backgroundColor: \"light\"+color, textTransform: \"uppercase\"}}\n                        key={index} \n                        ref={(ref) => (inputRefs.current[index] = ref)}\n                        index={index}\n                        value={value[index]} \n                        pattern=\"[a-zA-Z]+\"\n                        maxLength={1} \n                        onKeyUp={(e) => handleKeyUp(index, e)}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Row;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGC,IAAA,IAAmD;EAAAC,EAAA;EAAA,IAAlD;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,SAAS;IAAEC;EAAO,CAAC,GAAAN,IAAA;EACtD,MAAMO,SAAS,GAAGX,MAAM,CAAC,EAAE,CAAC;EAE5B,MAAMY,OAAO,GAAG,SAAAA,CAASC,EAAE,EAAC;IACxB,OAAO,UAAU,CAACC,IAAI,CAACD,EAAE,CAAC;EAC9B,CAAC;EAED,MAAME,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IAClC,MAAM;MAAEC;IAAI,CAAC,GAAGD,KAAK;IACrB,IAAIL,OAAO,CAACM,GAAG,CAAC,EAAE;MACd,MAAMC,QAAQ,GAAG,CAAC,GAAGb,KAAK,CAAC;MAC3Ba,QAAQ,CAACH,KAAK,CAAC,GAAGE,GAAG;MACrBX,QAAQ,CAACY,QAAQ,CAAC;MAClB,IAAIH,KAAK,GAAG,CAAC,EAAEL,SAAS,CAACS,OAAO,CAACJ,KAAK,GAAG,CAAC,CAAC,CAACK,KAAK,CAAC,CAAC;IACvD;EACJ,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACZ,IAAIU,SAAS,EACTE,SAAS,CAACS,OAAO,CAACV,MAAM,CAAC,CAACW,KAAK,CAAC,CAAC;EACzC,CAAC,EAAE,CAACZ,SAAS,EAAEC,MAAM,CAAC,CAAC;EAGvB,oBACIR,OAAA;IAAAoB,QAAA,eACIpB,OAAA;MAAKqB,SAAS,EAAC,KAAK;MAAAD,QAAA,EAEf,CAAC,GAAGE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEV,KAAK,iBAC5Bd,OAAA;QACIqB,SAAS,EAAC,OAAO;QACjBI,KAAK,EAAE;UAACC,eAAe,EAAE,OAAO,GAACpB,KAAK;UAAEqB,aAAa,EAAE;QAAW,CAAE;QAEpEC,GAAG,EAAGA,GAAG,IAAMnB,SAAS,CAACS,OAAO,CAACJ,KAAK,CAAC,GAAGc,GAAK;QAC/Cd,KAAK,EAAEA,KAAM;QACbV,KAAK,EAAEA,KAAK,CAACU,KAAK,CAAE;QACpBe,OAAO,EAAC,WAAW;QACnBC,SAAS,EAAE,CAAE;QACbC,OAAO,EAAGC,CAAC,IAAKnB,WAAW,CAACC,KAAK,EAAEkB,CAAC;MAAE,GANjClB,KAAK;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOb,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACjC,EAAA,CA3CIF,GAAG;AAAAoC,EAAA,GAAHpC,GAAG;AA6CT,eAAeA,GAAG;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}