{"ast":null,"code":"import { wordList } from \"../Data/wordList\";\nconst ResultsProvider = rows => {\n  let filteredList = [...wordList];\n  for (let row of rows) {\n    filteredList = filteredList.filter(word => {\n      // check if word matches row\n      for (let [i, char] of row['array'].entries()) {\n        if (char === null) continue;\n        if (row.color === \"green\" && char !== word[i]) {\n          return false;\n        }\n        if (row.color === \"yellow\" && (!(char in word) || char === word[i])) {\n          return false;\n        }\n        if (row.color === \"grey\" && char in word) {\n          return false;\n        }\n      }\n      return true;\n    });\n    console.log(filteredList);\n  }\n  return filteredList;\n};\n_c = ResultsProvider;\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\nvar _c;\n$RefreshReg$(_c, \"ResultsProvider\");","map":{"version":3,"names":["wordList","ResultsProvider","rows","filteredList","row","filter","word","i","char","entries","color","console","log","_c","$RefreshReg$"],"sources":["/Users/cooperroper/my_projects/Wordle_Helper/wordle_helper/src/Components/ResultsProvider.js"],"sourcesContent":["import { wordList } from \"../Data/wordList\";\n\nconst ResultsProvider = ( rows ) => {\n    let filteredList = [...wordList];\n\n    for( let row of rows ) {\n        filteredList = filteredList.filter((word) => {\n            // check if word matches row\n            for (let [i, char] of row['array'].entries()) {\n\n                if (char === null) continue;\n\n                if (row.color === \"green\" && char !== word[i]) {\n                    return false;\n                }\n                if (row.color === \"yellow\" && (!(char in word) || char === word[i])) {\n                    return false;\n                }\n                if (row.color === \"grey\" && char in word) {\n                    return false;\n                }\n            }\n            return true;\n        });\n        console.log(filteredList);\n\n    }   \n    return filteredList\n};\n\nexport default ResultsProvider;\n\n// def checker(guess, word, color):\n\n//     for i, char in enumerate(guess):\n\n//         if (char == \"?\"):\n//             continue\n\n//         elif (not char.isalpha()):\n//             print(\"Unknown character: fatal error. Exiting...\\n\")\n//             exit(-1)\n\n//         elif (color == \"green\" and char != word[i]):\n//             return False\n\n//         elif (color == \"yellow\" and (char not in word or char == word[i])):\n//             return False\n\n//         elif (color == \"grey\" and char in word):\n//             return False\n\n//     return True\n\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,MAAMC,eAAe,GAAKC,IAAI,IAAM;EAChC,IAAIC,YAAY,GAAG,CAAC,GAAGH,QAAQ,CAAC;EAEhC,KAAK,IAAII,GAAG,IAAIF,IAAI,EAAG;IACnBC,YAAY,GAAGA,YAAY,CAACE,MAAM,CAAEC,IAAI,IAAK;MACzC;MACA,KAAK,IAAI,CAACC,CAAC,EAAEC,IAAI,CAAC,IAAIJ,GAAG,CAAC,OAAO,CAAC,CAACK,OAAO,CAAC,CAAC,EAAE;QAE1C,IAAID,IAAI,KAAK,IAAI,EAAE;QAEnB,IAAIJ,GAAG,CAACM,KAAK,KAAK,OAAO,IAAIF,IAAI,KAAKF,IAAI,CAACC,CAAC,CAAC,EAAE;UAC3C,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,CAACM,KAAK,KAAK,QAAQ,KAAK,EAAEF,IAAI,IAAIF,IAAI,CAAC,IAAIE,IAAI,KAAKF,IAAI,CAACC,CAAC,CAAC,CAAC,EAAE;UACjE,OAAO,KAAK;QAChB;QACA,IAAIH,GAAG,CAACM,KAAK,KAAK,MAAM,IAAIF,IAAI,IAAIF,IAAI,EAAE;UACtC,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf,CAAC,CAAC;IACFK,OAAO,CAACC,GAAG,CAACT,YAAY,CAAC;EAE7B;EACA,OAAOA,YAAY;AACvB,CAAC;AAACU,EAAA,GA1BIZ,eAAe;AA4BrB,eAAeA,eAAe;;AAE9B;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}